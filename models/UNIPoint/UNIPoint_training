{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "accelerator": "GPU",
    "colab": {
      "name": "UNIPoint_Stepanov.ipynb",
      "provenance": []
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "metadata": {
        "id": "uw2croG95_XE"
      },
      "source": [
        "import torch\r\n",
        "import torch.nn as nn\r\n",
        "from torch.nn import functional as F\r\n",
        "from torch import optim\r\n",
        "\r\n",
        "import numpy as np\r\n",
        "\r\n",
        "from torch.utils.data import Dataset, DataLoader\r\n",
        "device = torch.device(\"cuda:0\" if torch.cuda.is_available() else \"cpu\")"
      ],
      "execution_count": 1,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "R51TRvHx6jvL",
        "outputId": "622813d8-b831-4bb9-f118-0c89f23839c0"
      },
      "source": [
        "!git clone https://username:password@github.com/rodrigorivera/mds20_deepfolio\r\n",
        "from mds20_deepfolio.models.NeuralHawkesProcess.DataWrapper import NHPDataset\r\n",
        "\r\n",
        "!unzip /content/mds20_deepfolio/models/NeuralHawkesProcess/data/fin_data.zip \\\r\n",
        "      -d /content/mds20_deepfolio/models/NeuralHawkesProcess/data/"
      ],
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "fatal: destination path 'mds20_deepfolio' already exists and is not an empty directory.\n",
            "Archive:  /content/mds20_deepfolio/models/NeuralHawkesProcess/data/fin_data.zip\n",
            "replace /content/mds20_deepfolio/models/NeuralHawkesProcess/data/test.pkl? [y]es, [n]o, [A]ll, [N]one, [r]ename: a\n",
            "error:  invalid response [a]\n",
            "replace /content/mds20_deepfolio/models/NeuralHawkesProcess/data/test.pkl? [y]es, [n]o, [A]ll, [N]one, [r]ename: a\n",
            "error:  invalid response [a]\n",
            "replace /content/mds20_deepfolio/models/NeuralHawkesProcess/data/test.pkl? [y]es, [n]o, [A]ll, [N]one, [r]ename: A\n",
            "  inflating: /content/mds20_deepfolio/models/NeuralHawkesProcess/data/test.pkl  \n",
            "  inflating: /content/mds20_deepfolio/models/NeuralHawkesProcess/data/dev.pkl  \n",
            "  inflating: /content/mds20_deepfolio/models/NeuralHawkesProcess/data/train.pkl  \n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "qQEzfHUE4BIr"
      },
      "source": [
        "import pickle\r\n",
        "\r\n",
        "class NHPDataset(Dataset):\r\n",
        "    ''' \r\n",
        "    Create Dataset for Neural Hawkey Process\r\n",
        "    '''\r\n",
        "\r\n",
        "    def __init__(self, file_path):\r\n",
        "        self.event_type = []\r\n",
        "        self.sequence_time = []\r\n",
        "\r\n",
        "        with open(file_path, 'rb') as f:\r\n",
        "\r\n",
        "            if 'dev' in file_path:\r\n",
        "                seqs = pickle.load(f, encoding='latin1')['dev']\r\n",
        "            elif 'train' in file_path:\r\n",
        "                seqs = pickle.load(f, encoding='latin1')['train']\r\n",
        "            elif 'test' in file_path:\r\n",
        "                seqs = pickle.load(f, encoding='latin1')['test']\r\n",
        "\r\n",
        "            for idx, seq in enumerate(seqs):\r\n",
        "                self.event_type.append(torch.Tensor([int(event['type_event']) for event in seq]))\r\n",
        "                self.sequence_time.append(torch.Tensor([float(event['time_since_start']) for event in seq]))\r\n",
        "\r\n",
        "            self.event_time = []\r\n",
        "            for types, times in zip(self.event_type, self.sequence_time):\r\n",
        "\r\n",
        "                self.event_time.append(times[types==0])\r\n",
        "                self.event_time.append(times[types==1])\r\n",
        "\r\n",
        "    def __len__(self):\r\n",
        "        return len(self.event_time)\r\n",
        "    \r\n",
        "    def __getitem__(self, index):\r\n",
        "\r\n",
        "        event_time = torch.Tensor(self.event_time[index])\r\n",
        "        delta_time = torch.zeros_like(event_time)\r\n",
        "        delta_time[1:] = event_time[1:] - event_time[:-1]\r\n",
        "\r\n",
        "        return delta_time"
      ],
      "execution_count": 3,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "YUbht85K9g5z"
      },
      "source": [
        "import pickle\r\n",
        "\r\n",
        "class NHPDataset(Dataset):\r\n",
        "    ''' \r\n",
        "    Create Dataset for Neural Hawkey Process\r\n",
        "    '''\r\n",
        "\r\n",
        "    def __init__(self, file_path):\r\n",
        "        self.event_type = []\r\n",
        "        self.event_time = []\r\n",
        "\r\n",
        "        with open(file_path, 'rb') as f:\r\n",
        "\r\n",
        "            if 'dev' in file_path:\r\n",
        "                seqs = pickle.load(f, encoding='latin1')['dev']\r\n",
        "            elif 'train' in file_path:\r\n",
        "                seqs = pickle.load(f, encoding='latin1')['train']\r\n",
        "            elif 'test' in file_path:\r\n",
        "                seqs = pickle.load(f, encoding='latin1')['test']\r\n",
        "\r\n",
        "            for idx, seq in enumerate(seqs):\r\n",
        "                self.event_type.append(torch.Tensor([int(event['type_event']) for event in seq]))\r\n",
        "                self.event_time.append(torch.Tensor([float(event['time_since_start']) for event in seq]))\r\n",
        "\r\n",
        "    def __len__(self):\r\n",
        "        return len(self.event_type)\r\n",
        "    \r\n",
        "    def __getitem__(self, index):\r\n",
        "\r\n",
        "        event_type = torch.LongTensor(self.event_type[index].long())\r\n",
        "        event_time = torch.Tensor(self.event_time[index])\r\n",
        "        delta_time = torch.zeros_like(event_time)\r\n",
        "        delta_time[1:] = event_time[1:] - event_time[:-1]\r\n",
        "        \r\n",
        "        return delta_time, event_type"
      ],
      "execution_count": 4,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "4-GXNf7K_rVg"
      },
      "source": [
        "train_dataset = NHPDataset('/content/mds20_deepfolio/models/NeuralHawkesProcess/data/train.pkl')\r\n",
        "val_dataset = NHPDataset('/content/mds20_deepfolio/models/NeuralHawkesProcess/data/dev.pkl')\r\n",
        "test_dataset = NHPDataset('/content/mds20_deepfolio/models/NeuralHawkesProcess/data/test.pkl')\r\n",
        "\r\n",
        "train_loader = DataLoader(train_dataset, batch_size=12)\r\n",
        "val_loader = DataLoader(val_dataset, batch_size=12)\r\n",
        "test_loader = DataLoader(test_dataset, batch_size=12)"
      ],
      "execution_count": 5,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "NBFHyoj1zB8M",
        "outputId": "9179531d-cb79-47e0-bebd-f2f35e753c05"
      },
      "source": [
        "train_dataset[3]"
      ],
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(tensor([0.0000, 0.1000, 2.1500,  ..., 0.3833, 1.3000, 0.0166]),\n",
              " tensor([1, 1, 1,  ..., 1, 0, 0]))"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 6
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "hB3IwNmFUM1I"
      },
      "source": [
        "def create_unifrom_d(event_times, device = None):\r\n",
        "    \"\"\"\r\n",
        "    Create uniform distribution of t from given event sequenses\r\n",
        "    Inputs:\r\n",
        "        event_times (B, T) - inter-arrival times of events\r\n",
        "    \"\"\"\r\n",
        "\r\n",
        "    batch_size, batch_len = event_times.shape\r\n",
        "    sim_inter_times = []\r\n",
        "    tot_time_seqs = event_times.sum(dim=1)\r\n",
        "    for tot_time in tot_time_seqs:\r\n",
        "\r\n",
        "          sim_time_seqs = torch.zeros(batch_len).uniform_(0,tot_time)\r\n",
        "          sim_inter_time = torch.zeros(batch_len)\r\n",
        "          sim_inter_time[1:] = abs(sim_time_seqs[1:] - sim_time_seqs[:-1])\r\n",
        "          sim_inter_times.append(sim_inter_time)\r\n",
        "\r\n",
        "    if device != None:\r\n",
        "        sim_inter_times = torch.stack(sim_inter_times).to(device)\r\n",
        "    else: \r\n",
        "        sim_inter_times = torch.stack(sim_inter_times)\r\n",
        "\r\n",
        "    return sim_inter_times"
      ],
      "execution_count": 7,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "zef5MhBt6Ilk"
      },
      "source": [
        "class UNIPoint(nn.Module):\r\n",
        "    def __init__(self, n_features, n_parameters, n_basis_functions, device, hidden_size=256):\r\n",
        "      \"\"\"\r\n",
        "      Input parameters:\r\n",
        "      n_neurons - number of neurons inside RNN\r\n",
        "      n_parameters - expecteed number of parameters in basis function\r\n",
        "      n_basis_functions - number of basis functions\r\n",
        "      \"\"\"\r\n",
        "      super(UNIPoint, self).__init__()\r\n",
        "\r\n",
        "      self.rnn = nn.RNNCell(n_features, hidden_size)\r\n",
        "      self.h2p = nn.Linear(hidden_size, n_parameters * n_basis_functions)\r\n",
        "      self.Softplus = torch.nn.Softplus(beta = 1)\r\n",
        "\r\n",
        "      self.n_basis_functions = n_basis_functions\r\n",
        "      self.hidden_size = hidden_size\r\n",
        "      self.device = device\r\n",
        "\r\n",
        "    def ReLU(self, parameter_1, parameter_2, time):\r\n",
        "      \"\"\"Function to apply Rectified Linear Unit (ReLU) as basis function inside network \r\n",
        "        Input parameters:\r\n",
        "          parameters - alpha, beta for basis function's value calculation\r\n",
        "          time - column-vector with time which had been spent since the begining of \r\n",
        "                  temporal point process (TPP)\r\n",
        "      \"\"\"\r\n",
        "      self.output = torch.relu(self.parameters[:,parameter_1] * time + self.parameters[:,parameter_2] ) \r\n",
        "      return self.output\r\n",
        "    \r\n",
        "    def PowerLaw(self, parameter_1, parameter_2, time): # need to fix (see ReLU parameters and do the same)\r\n",
        "      \"\"\"Function to apply Power Law (PL) as basis function inside network \r\n",
        "        Input parameters:\r\n",
        "          parameters - alpha, beta for basis function's value calculation\r\n",
        "          time - column-vector with time which had been spent since the begining of \r\n",
        "                  temporal point process (TPP)\r\n",
        "      \"\"\"\r\n",
        "      self.output = self.parameters[:,parameter_1] * (1 + time)**( - self.parameters[:,parameter_2])\r\n",
        "      return self.output\r\n",
        "\r\n",
        "\r\n",
        "    def intensity_layer(self, tau):\r\n",
        "          '''\r\n",
        "          Layer to calculate intesity with respect to time from the last event\r\n",
        "\r\n",
        "          Input: tau - time from the last event\r\n",
        "          '''\r\n",
        "\r\n",
        "          for function in range(self.n_basis_functions): \r\n",
        "              # calculating numbers of parameters to take for basis function\r\n",
        "              par1 = 2 * function\r\n",
        "              par2 = 2 * function + 1\r\n",
        "              self.basis_res[:, function] = self.ReLU(par1, par2, tau) \r\n",
        "          \r\n",
        "          self.sum_res = torch.sum(self.basis_res, 1)\r\n",
        "          intensity = self.Softplus(self.sum_res)\r\n",
        "\r\n",
        "          return intensity\r\n",
        "\r\n",
        "    def init_hidden(self, batch_size, hidden_size):\r\n",
        "\r\n",
        "      self.hx = torch.randn(batch_size, hidden_size, device=self.device) # initialize hidden state \r\n",
        "      self.basis_res = torch.randn(batch_size, self.n_basis_functions) #initialize matrix for basis f-s calculations results\r\n",
        "\r\n",
        "    def forward(self, event_times, event_type):\r\n",
        "      \"\"\"Input parameters:\r\n",
        "          event_times - interarrival times between events\r\n",
        "\r\n",
        "      \"\"\"\r\n",
        "        \r\n",
        "      hidden_states, intensity_values = [], []\r\n",
        "      batch_size, batch_len = event_times.shape\r\n",
        "\r\n",
        "      # init hidden states\r\n",
        "      self.init_hidden(batch_size, self.hidden_size)\r\n",
        "\r\n",
        "      # for each time step (here X shape is (batch_size, seq_len, n_features) )\r\n",
        "      for i in range(batch_len):\r\n",
        "\r\n",
        "          self.hx = self.rnn(event_times[:,i].reshape(-1,1), self.hx)\r\n",
        "          self.parameters = self.h2p(self.hx).to(self.device)\r\n",
        "          \r\n",
        "          intensity = self.intensity_layer(event_times[:,i])\r\n",
        "          hidden_states.append(self.hx)\r\n",
        "          intensity_values.append(intensity)\r\n",
        "                    \r\n",
        "      return  torch.stack(intensity_values)\r\n",
        "\r\n",
        "    def LogLikelihoodLoss(self, intensity, event_times):\r\n",
        "        \"\"\"\r\n",
        "        Inputs:\r\n",
        "            intensity (S, B) - intensity values,\r\n",
        "            event_times (B, S) - inter-arrival times of events\r\n",
        "        \"\"\"\r\n",
        "\r\n",
        "        # Compute log-likelihood of of the events that happened (first term) via sum of log-intensities \r\n",
        "        original_loglikelihood = intensity.log().sum(dim=0)\r\n",
        "\r\n",
        "        #Compute log-probabilities of non-events (second term) using Monte Carlo method\r\n",
        "\r\n",
        "        #Calc intensity of simulated events\r\n",
        "        sim_times = create_unifrom_d(event_times, self.device)\r\n",
        "        sim_intesity = []\r\n",
        "        for i in range(sim_times.shape[1]):\r\n",
        "            sim_intesity.append(self.intensity_layer(sim_times[:,i]))\r\n",
        "\r\n",
        "        sim_intesity = torch.stack(sim_intesity).to(self.device)\r\n",
        "        tot_time_seqs, seq_len = event_times.sum(dim=1), event_times.shape[1]\r\n",
        "        mc_coef = (tot_time_seqs / seq_len)\r\n",
        "\r\n",
        "        simulated_likelihood = sim_intesity.sum(dim=0) * mc_coef\r\n",
        "        \r\n",
        "        # sum over batch\r\n",
        "        LLH = (original_loglikelihood - simulated_likelihood).sum()\r\n",
        "\r\n",
        "        return -LLH"
      ],
      "execution_count": 11,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "43ox7WeI9BZm"
      },
      "source": [
        "# model evaluation\r\n",
        "\r\n",
        "# X_batch dimension = (batch_size, seq_len, n_features)\r\n",
        "N_FEATURES = 1\r\n",
        "N_PARAMETERS = 2\r\n",
        "N_BASIS_FUNCTIONS = 4\r\n",
        "\r\n",
        "model = UNIPoint(N_FEATURES, N_PARAMETERS, N_BASIS_FUNCTIONS, device).to(device)\r\n",
        "optimizer = torch.optim.Adam(model.parameters(), lr=0.0001)\r\n"
      ],
      "execution_count": 12,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "HCWGTW1phYym",
        "outputId": "d101f4b5-deaa-44ed-b213-a3598ba10aa8"
      },
      "source": [
        "epoch_list = []\r\n",
        "loss_list = []\r\n",
        "\r\n",
        "for epoch in range(20):\r\n",
        "    epoch_ll, event_num = 0, 0\r\n",
        "\r\n",
        "    for time, event in train_loader:\r\n",
        "\r\n",
        "        intensity_values = model(time.to(device), event.to(device))\r\n",
        "        loss = model.LogLikelihoodLoss(intensity_values.to(device), time.to(device)).mean()\r\n",
        "        optimizer.zero_grad()\r\n",
        "        loss.backward() \r\n",
        "        optimizer.step()\r\n",
        "\r\n",
        "        event_num += time.shape[0] * time.shape[1]\r\n",
        "        epoch_ll += loss.detach().cpu().item()\r\n",
        "\r\n",
        "    loss_list.append(-epoch_ll/event_num)\r\n",
        "    epoch_list.append(epoch)\r\n",
        "\r\n",
        "    print('Epoch:', epoch)\r\n",
        "    print('LogLike/nats', -epoch_ll/event_num)\r\n",
        "    print('-'*60)"
      ],
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Epoch: 0\n",
            "LogLike/nats -1481.2186290633056\n",
            "------------------------------------------------------------\n",
            "Epoch: 1\n",
            "LogLike/nats -675.7854453315925\n",
            "------------------------------------------------------------\n",
            "Epoch: 2\n",
            "LogLike/nats -235.00455699089417\n",
            "------------------------------------------------------------\n",
            "Epoch: 3\n",
            "LogLike/nats -54.57424181140362\n",
            "------------------------------------------------------------\n",
            "Epoch: 4\n",
            "LogLike/nats -2.0265333969924844\n",
            "------------------------------------------------------------\n",
            "Epoch: 5\n",
            "LogLike/nats -1.9830471319643215\n",
            "------------------------------------------------------------\n",
            "Epoch: 6\n",
            "LogLike/nats -1.9507670679233202\n",
            "------------------------------------------------------------\n",
            "Epoch: 7\n",
            "LogLike/nats -1.8963839889127414\n",
            "------------------------------------------------------------\n",
            "Epoch: 8\n",
            "LogLike/nats -1.85959802606939\n",
            "------------------------------------------------------------\n",
            "Epoch: 9\n",
            "LogLike/nats -1.8076356425075741\n",
            "------------------------------------------------------------\n",
            "Epoch: 10\n",
            "LogLike/nats -1.755290764610743\n",
            "------------------------------------------------------------\n",
            "Epoch: 11\n",
            "LogLike/nats -1.6913179896209953\n",
            "------------------------------------------------------------\n",
            "Epoch: 12\n",
            "LogLike/nats -1.6241494775189564\n",
            "------------------------------------------------------------\n",
            "Epoch: 13\n",
            "LogLike/nats -1.5756279018006596\n",
            "------------------------------------------------------------\n",
            "Epoch: 14\n",
            "LogLike/nats -1.496261623548969\n",
            "------------------------------------------------------------\n",
            "Epoch: 15\n",
            "LogLike/nats -1.4400726836333735\n",
            "------------------------------------------------------------\n",
            "Epoch: 16\n",
            "LogLike/nats -1.412051303024882\n",
            "------------------------------------------------------------\n",
            "Epoch: 17\n",
            "LogLike/nats -1.3654852911791537\n",
            "------------------------------------------------------------\n",
            "Epoch: 18\n",
            "LogLike/nats -1.3177831439512822\n",
            "------------------------------------------------------------\n",
            "Epoch: 19\n",
            "LogLike/nats -1.277103104220544\n",
            "------------------------------------------------------------\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 282
        },
        "id": "9C2FdZg8cmQB",
        "outputId": "1f400cb1-e642-4ee5-ab9b-33031d16b758"
      },
      "source": [
        "import matplotlib.pyplot as plt\r\n",
        "\r\n",
        "plt.plot(epoch_list,loss_list)"
      ],
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[<matplotlib.lines.Line2D at 0x7f0d57818908>]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 14
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "yRan7e5Xrfkf"
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    }
  ]
}
