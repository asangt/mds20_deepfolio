# -*- coding: utf-8 -*-
"""utils.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PZ2_u9PeZz9UZ-0m_5KboKoyds-BrSbj
"""

import glob

import torch
from torch import nn
import numpy as np

def create_unifrom_d(event_times, device = None):
    """
    Create uniform distribution of t from given event sequenses
    Inputs:
        event_times (B, T) - inter-arrival times of events
    """

    batch_size, batch_len = event_times.shape
    sim_inter_times = []
    tot_time_seqs = event_times.sum(dim=1)
    for tot_time in tot_time_seqs:

          sim_time_seqs = torch.zeros(batch_len).uniform_(0,tot_time)
          sim_inter_time = torch.zeros(batch_len)
          sim_inter_time[1:] = abs(sim_time_seqs[1:] - sim_time_seqs[:-1])
          sim_inter_times.append(sim_inter_time)

    if device != None:
        sim_inter_times = torch.stack(sim_inter_times).to(device)
    else: 
        sim_inter_times = torch.stack(sim_inter_times)

    return sim_inter_times

class TupoDataset(Dataset):
    def __init__(self, data_folder, data_type = '.npy'):

        self.file_paths = glob.glob(data_folder+'*'+data_type)
        
    def __len__(self):

        return len(self.file_paths)
    
    def __getitem__(self, index):

        sample = np.load(self.file_paths[index])
        event_time = torch.Tensor(sample[0,:])
        event_type = torch.LongTensor(sample[1,:])
        
        return event_time, event_type
